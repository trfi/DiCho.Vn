datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  projectName         = "DiCho"
  projectDatabaseType = "PostgreSQL"
}

model User {
  id             String    @id
  phone          String    @unique
  password       String
  phoneVerified  Boolean   @default(false)
  email          String?   @unique
  emailVerified  Boolean   @default(false)
  name           String?
  username       String?
  avatar         String?
  gender         Gender?
  birthday       DateTime?
  address        String?
  role           Role?     @default(USER)
  posts          Post[]
  votes          Vote[]
  comments       Comment[]
  likes          Like[]
  followers      Follow[]  @relation("Following")
  following      Follow[]  @relation("User")
  followingCount Int       @default(0)
  followerCount  Int       @default(0)
  likeCount      Int       @default(0)
  commentCount   Int       @default(0)
  created        DateTime  @default(now())
  updated        DateTime  @updatedAt

  messagesSended   Chat[] @relation("Sender")
  messagesReceived Chat[] @relation("Receiver")
  @@index([id])
}

model Post {
  id           String     @id @default(cuid())
  title        String
  thumbnail    String?
  category     Category   @relation(fields: [categoryId], references: [id])
  categoryId   String
  type         Type
  broker       Boolean    @default("false")
  params       Json?
  region       Int
  area         Int
  ward         Int
  price        Int
  images       String[]
  content      String
  address      String?
  postedBy     User       @relation(fields: [postedById], references: [id])
  postedById   String
  likeCount    Int        @default(0)
  commentCount Int        @default(0)
  status       PostStatus @default(P)
  votes        Vote[]
  comments     Comment[]
  likes        Like[]
  created      DateTime   @default(now())
  updated      DateTime   @updatedAt

  @@index([id, postedById, categoryId, type])
}

model Vote {
  id     String @id
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([postId, userId])
}

model Comment {
  id      String @id
  post    Post   @relation(fields: [postId], references: [id])
  postId  String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  content String

  @@index([postId, userId])
}

model Follow {
  user        User     @relation("User", fields: [userId], references: [id])
  userId      String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  created     DateTime @default(now())

  @@id([userId, followingId])
  @@unique([userId, followingId])
}

model Like {
  post    Post     @relation(fields: [postId], references: [id])
  postId  String
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  created DateTime @default(now())

  @@unique([postId, userId])
  @@index([postId, userId])
}

model Category {
  id        String   @id
  posts     Post[]
  title     String
  thumbnail String
  slug      String
  path      String?
  parent    String?
  children  Json?
  types     Type[]
  created   DateTime @default(now())
  updated   DateTime @updatedAt
}

model Message {
  id         String   @id
  content    String
  attachment String[]
  chat       Chat[]   @relation("Message")
}

model Chat {
  message      Message? @relation("Message", fields: [msgId], references: [id])
  msgId        String   @unique
  sender       User     @relation("Sender", fields: [senderId], references: [id])
  senderId     String
  receiver     User     @relation("Receiver", fields: [receiverId], references: [id])
  receiverId   String
  lastMsg      String?
  seen         Boolean  @default(false)
  deletedUser  String   @default("")
  unseenNumber Int      @default(0)
}

enum PostStatus {
  H // HIDE
  P // PENDING
  R // REJECT
  A // APPROVED
}

enum PostDetail {
  images
  content
  address
}

enum Params {
  acreage
  rooms
}

enum Type {
  S // SELL
  T // TO RENT
  B // BUY
  R // RENT
}

enum Gender {
  M
  F
  O
}

enum Role {
  ADMIN
  MODERATOR
  USER
}
