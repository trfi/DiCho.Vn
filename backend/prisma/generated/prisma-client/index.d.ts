// Code generated by Prisma (prisma@1.34.12). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Gender = "M" | "F" | "O";

export type Role = "ADMIN" | "MODERATOR";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "thumbnail_ASC"
  | "thumbnail_DESC"
  | "broker_ASC"
  | "broker_DESC"
  | "region_ASC"
  | "region_DESC"
  | "area_ASC"
  | "area_DESC"
  | "ward_ASC"
  | "ward_DESC"
  | "price_ASC"
  | "price_DESC"
  | "created_ASC"
  | "created_DESC"
  | "updated_ASC"
  | "updated_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "path_ASC"
  | "path_DESC"
  | "created_ASC"
  | "created_DESC"
  | "updated_ASC"
  | "updated_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "password_ASC"
  | "password_DESC"
  | "phoneVerified_ASC"
  | "phoneVerified_DESC"
  | "email_ASC"
  | "email_DESC"
  | "emailVerified_ASC"
  | "emailVerified_DESC"
  | "name_ASC"
  | "name_DESC"
  | "username_ASC"
  | "username_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "address_ASC"
  | "address_DESC"
  | "role_ASC"
  | "role_DESC"
  | "created_ASC"
  | "created_DESC"
  | "updated_ASC"
  | "updated_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  category?: Maybe<CategoryWhereInput>;
  broker?: Maybe<Boolean>;
  broker_not?: Maybe<Boolean>;
  params?: Maybe<ParamsWhereInput>;
  region?: Maybe<Int>;
  region_not?: Maybe<Int>;
  region_in?: Maybe<Int[] | Int>;
  region_not_in?: Maybe<Int[] | Int>;
  region_lt?: Maybe<Int>;
  region_lte?: Maybe<Int>;
  region_gt?: Maybe<Int>;
  region_gte?: Maybe<Int>;
  area?: Maybe<Int>;
  area_not?: Maybe<Int>;
  area_in?: Maybe<Int[] | Int>;
  area_not_in?: Maybe<Int[] | Int>;
  area_lt?: Maybe<Int>;
  area_lte?: Maybe<Int>;
  area_gt?: Maybe<Int>;
  area_gte?: Maybe<Int>;
  ward?: Maybe<Int>;
  ward_not?: Maybe<Int>;
  ward_in?: Maybe<Int[] | Int>;
  ward_not_in?: Maybe<Int[] | Int>;
  ward_lt?: Maybe<Int>;
  ward_lte?: Maybe<Int>;
  ward_gt?: Maybe<Int>;
  ward_gte?: Maybe<Int>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  postDetail?: Maybe<PostDetailWhereInput>;
  poster?: Maybe<UserWhereInput>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  updated?: Maybe<DateTimeInput>;
  updated_not?: Maybe<DateTimeInput>;
  updated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_lt?: Maybe<DateTimeInput>;
  updated_lte?: Maybe<DateTimeInput>;
  updated_gt?: Maybe<DateTimeInput>;
  updated_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface CategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cateId?: Maybe<PostWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  path?: Maybe<String>;
  path_not?: Maybe<String>;
  path_in?: Maybe<String[] | String>;
  path_not_in?: Maybe<String[] | String>;
  path_lt?: Maybe<String>;
  path_lte?: Maybe<String>;
  path_gt?: Maybe<String>;
  path_gte?: Maybe<String>;
  path_contains?: Maybe<String>;
  path_not_contains?: Maybe<String>;
  path_starts_with?: Maybe<String>;
  path_not_starts_with?: Maybe<String>;
  path_ends_with?: Maybe<String>;
  path_not_ends_with?: Maybe<String>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  updated?: Maybe<DateTimeInput>;
  updated_not?: Maybe<DateTimeInput>;
  updated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_lt?: Maybe<DateTimeInput>;
  updated_lte?: Maybe<DateTimeInput>;
  updated_gt?: Maybe<DateTimeInput>;
  updated_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export interface ParamsWhereInput {
  acreage?: Maybe<Int>;
  acreage_not?: Maybe<Int>;
  acreage_in?: Maybe<Int[] | Int>;
  acreage_not_in?: Maybe<Int[] | Int>;
  acreage_lt?: Maybe<Int>;
  acreage_lte?: Maybe<Int>;
  acreage_gt?: Maybe<Int>;
  acreage_gte?: Maybe<Int>;
  rooms?: Maybe<Int>;
  rooms_not?: Maybe<Int>;
  rooms_in?: Maybe<Int[] | Int>;
  rooms_not_in?: Maybe<Int[] | Int>;
  rooms_lt?: Maybe<Int>;
  rooms_lte?: Maybe<Int>;
  rooms_gt?: Maybe<Int>;
  rooms_gte?: Maybe<Int>;
  AND?: Maybe<ParamsWhereInput[] | ParamsWhereInput>;
}

export interface PostDetailWhereInput {
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  AND?: Maybe<PostDetailWhereInput[] | PostDetailWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  phoneVerified?: Maybe<Boolean>;
  phoneVerified_not?: Maybe<Boolean>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  emailVerified?: Maybe<Boolean>;
  emailVerified_not?: Maybe<Boolean>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  gender?: Maybe<Gender>;
  gender_not?: Maybe<Gender>;
  gender_in?: Maybe<Gender[] | Gender>;
  gender_not_in?: Maybe<Gender[] | Gender>;
  birthday?: Maybe<DateTimeInput>;
  birthday_not?: Maybe<DateTimeInput>;
  birthday_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_lt?: Maybe<DateTimeInput>;
  birthday_lte?: Maybe<DateTimeInput>;
  birthday_gt?: Maybe<DateTimeInput>;
  birthday_gte?: Maybe<DateTimeInput>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  posts_some?: Maybe<PostWhereInput>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  updated?: Maybe<DateTimeInput>;
  updated_not?: Maybe<DateTimeInput>;
  updated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_lt?: Maybe<DateTimeInput>;
  updated_lte?: Maybe<DateTimeInput>;
  updated_gt?: Maybe<DateTimeInput>;
  updated_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface CategoryCreateInput {
  id?: Maybe<ID_Input>;
  cateId: PostCreateOneWithoutCategoryInput;
  title: String;
  slug: String;
  path?: Maybe<String>;
}

export interface PostCreateOneWithoutCategoryInput {
  create?: Maybe<PostCreateWithoutCategoryInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutCategoryInput {
  id?: Maybe<ID_Input>;
  title: String;
  thumbnail: String;
  broker?: Maybe<Boolean>;
  params: ParamsCreateOneInput;
  region: Int;
  area: Int;
  ward: Int;
  price: Int;
  postDetail: PostDetailCreateOneInput;
  poster: UserCreateOneWithoutPostsInput;
}

export interface ParamsCreateOneInput {
  create?: Maybe<ParamsCreateInput>;
}

export interface ParamsCreateInput {
  acreage?: Maybe<Int>;
  rooms?: Maybe<Int>;
}

export interface PostDetailCreateOneInput {
  create?: Maybe<PostDetailCreateInput>;
}

export interface PostDetailCreateInput {
  images?: Maybe<PostDetailCreateimagesInput>;
  content: String;
  address: String;
}

export interface PostDetailCreateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  phone: String;
  password: String;
  phoneVerified?: Maybe<Boolean>;
  email?: Maybe<String>;
  emailVerified?: Maybe<Boolean>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  avatar?: Maybe<String>;
  gender?: Maybe<Gender>;
  birthday?: Maybe<DateTimeInput>;
  address?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface CategoryUpdateInput {
  cateId?: Maybe<PostUpdateOneRequiredWithoutCategoryInput>;
  title?: Maybe<String>;
  slug?: Maybe<String>;
  path?: Maybe<String>;
}

export interface PostUpdateOneRequiredWithoutCategoryInput {
  create?: Maybe<PostCreateWithoutCategoryInput>;
  update?: Maybe<PostUpdateWithoutCategoryDataInput>;
  upsert?: Maybe<PostUpsertWithoutCategoryInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutCategoryDataInput {
  title?: Maybe<String>;
  thumbnail?: Maybe<String>;
  broker?: Maybe<Boolean>;
  params?: Maybe<ParamsUpdateOneRequiredInput>;
  region?: Maybe<Int>;
  area?: Maybe<Int>;
  ward?: Maybe<Int>;
  price?: Maybe<Int>;
  postDetail?: Maybe<PostDetailUpdateOneRequiredInput>;
  poster?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
}

export interface ParamsUpdateOneRequiredInput {
  create?: Maybe<ParamsCreateInput>;
  update?: Maybe<ParamsUpdateDataInput>;
  upsert?: Maybe<ParamsUpsertNestedInput>;
}

export interface ParamsUpdateDataInput {
  acreage?: Maybe<Int>;
  rooms?: Maybe<Int>;
}

export interface ParamsUpsertNestedInput {
  update: ParamsUpdateDataInput;
  create: ParamsCreateInput;
}

export interface PostDetailUpdateOneRequiredInput {
  create?: Maybe<PostDetailCreateInput>;
  update?: Maybe<PostDetailUpdateDataInput>;
  upsert?: Maybe<PostDetailUpsertNestedInput>;
}

export interface PostDetailUpdateDataInput {
  images?: Maybe<PostDetailUpdateimagesInput>;
  content?: Maybe<String>;
  address?: Maybe<String>;
}

export interface PostDetailUpdateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface PostDetailUpsertNestedInput {
  update: PostDetailUpdateDataInput;
  create: PostDetailCreateInput;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  phone?: Maybe<String>;
  password?: Maybe<String>;
  phoneVerified?: Maybe<Boolean>;
  email?: Maybe<String>;
  emailVerified?: Maybe<Boolean>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  avatar?: Maybe<String>;
  gender?: Maybe<Gender>;
  birthday?: Maybe<DateTimeInput>;
  address?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpsertWithoutCategoryInput {
  update: PostUpdateWithoutCategoryDataInput;
  create: PostCreateWithoutCategoryInput;
}

export interface CategoryUpdateManyMutationInput {
  title?: Maybe<String>;
  slug?: Maybe<String>;
  path?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  thumbnail: String;
  category: CategoryCreateOneWithoutCateIdInput;
  broker?: Maybe<Boolean>;
  params: ParamsCreateOneInput;
  region: Int;
  area: Int;
  ward: Int;
  price: Int;
  postDetail: PostDetailCreateOneInput;
  poster: UserCreateOneWithoutPostsInput;
}

export interface CategoryCreateOneWithoutCateIdInput {
  create?: Maybe<CategoryCreateWithoutCateIdInput>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface CategoryCreateWithoutCateIdInput {
  id?: Maybe<ID_Input>;
  title: String;
  slug: String;
  path?: Maybe<String>;
}

export interface PostUpdateInput {
  title?: Maybe<String>;
  thumbnail?: Maybe<String>;
  category?: Maybe<CategoryUpdateOneRequiredWithoutCateIdInput>;
  broker?: Maybe<Boolean>;
  params?: Maybe<ParamsUpdateOneRequiredInput>;
  region?: Maybe<Int>;
  area?: Maybe<Int>;
  ward?: Maybe<Int>;
  price?: Maybe<Int>;
  postDetail?: Maybe<PostDetailUpdateOneRequiredInput>;
  poster?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
}

export interface CategoryUpdateOneRequiredWithoutCateIdInput {
  create?: Maybe<CategoryCreateWithoutCateIdInput>;
  update?: Maybe<CategoryUpdateWithoutCateIdDataInput>;
  upsert?: Maybe<CategoryUpsertWithoutCateIdInput>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface CategoryUpdateWithoutCateIdDataInput {
  title?: Maybe<String>;
  slug?: Maybe<String>;
  path?: Maybe<String>;
}

export interface CategoryUpsertWithoutCateIdInput {
  update: CategoryUpdateWithoutCateIdDataInput;
  create: CategoryCreateWithoutCateIdInput;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  thumbnail?: Maybe<String>;
  broker?: Maybe<Boolean>;
  region?: Maybe<Int>;
  area?: Maybe<Int>;
  ward?: Maybe<Int>;
  price?: Maybe<Int>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  phone: String;
  password: String;
  phoneVerified?: Maybe<Boolean>;
  email?: Maybe<String>;
  emailVerified?: Maybe<Boolean>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  avatar?: Maybe<String>;
  gender?: Maybe<Gender>;
  birthday?: Maybe<DateTimeInput>;
  address?: Maybe<String>;
  role?: Maybe<Role>;
  posts?: Maybe<PostCreateManyWithoutPosterInput>;
}

export interface PostCreateManyWithoutPosterInput {
  create?: Maybe<PostCreateWithoutPosterInput[] | PostCreateWithoutPosterInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutPosterInput {
  id?: Maybe<ID_Input>;
  title: String;
  thumbnail: String;
  category: CategoryCreateOneWithoutCateIdInput;
  broker?: Maybe<Boolean>;
  params: ParamsCreateOneInput;
  region: Int;
  area: Int;
  ward: Int;
  price: Int;
  postDetail: PostDetailCreateOneInput;
}

export interface UserUpdateInput {
  phone?: Maybe<String>;
  password?: Maybe<String>;
  phoneVerified?: Maybe<Boolean>;
  email?: Maybe<String>;
  emailVerified?: Maybe<Boolean>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  avatar?: Maybe<String>;
  gender?: Maybe<Gender>;
  birthday?: Maybe<DateTimeInput>;
  address?: Maybe<String>;
  role?: Maybe<Role>;
  posts?: Maybe<PostUpdateManyWithoutPosterInput>;
}

export interface PostUpdateManyWithoutPosterInput {
  create?: Maybe<PostCreateWithoutPosterInput[] | PostCreateWithoutPosterInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutPosterInput[]
    | PostUpdateWithWhereUniqueWithoutPosterInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutPosterInput[]
    | PostUpsertWithWhereUniqueWithoutPosterInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutPosterInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutPosterDataInput;
}

export interface PostUpdateWithoutPosterDataInput {
  title?: Maybe<String>;
  thumbnail?: Maybe<String>;
  category?: Maybe<CategoryUpdateOneRequiredWithoutCateIdInput>;
  broker?: Maybe<Boolean>;
  params?: Maybe<ParamsUpdateOneRequiredInput>;
  region?: Maybe<Int>;
  area?: Maybe<Int>;
  ward?: Maybe<Int>;
  price?: Maybe<Int>;
  postDetail?: Maybe<PostDetailUpdateOneRequiredInput>;
}

export interface PostUpsertWithWhereUniqueWithoutPosterInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutPosterDataInput;
  create: PostCreateWithoutPosterInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  broker?: Maybe<Boolean>;
  broker_not?: Maybe<Boolean>;
  region?: Maybe<Int>;
  region_not?: Maybe<Int>;
  region_in?: Maybe<Int[] | Int>;
  region_not_in?: Maybe<Int[] | Int>;
  region_lt?: Maybe<Int>;
  region_lte?: Maybe<Int>;
  region_gt?: Maybe<Int>;
  region_gte?: Maybe<Int>;
  area?: Maybe<Int>;
  area_not?: Maybe<Int>;
  area_in?: Maybe<Int[] | Int>;
  area_not_in?: Maybe<Int[] | Int>;
  area_lt?: Maybe<Int>;
  area_lte?: Maybe<Int>;
  area_gt?: Maybe<Int>;
  area_gte?: Maybe<Int>;
  ward?: Maybe<Int>;
  ward_not?: Maybe<Int>;
  ward_in?: Maybe<Int[] | Int>;
  ward_not_in?: Maybe<Int[] | Int>;
  ward_lt?: Maybe<Int>;
  ward_lte?: Maybe<Int>;
  ward_gt?: Maybe<Int>;
  ward_gte?: Maybe<Int>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  updated?: Maybe<DateTimeInput>;
  updated_not?: Maybe<DateTimeInput>;
  updated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_lt?: Maybe<DateTimeInput>;
  updated_lte?: Maybe<DateTimeInput>;
  updated_gt?: Maybe<DateTimeInput>;
  updated_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  title?: Maybe<String>;
  thumbnail?: Maybe<String>;
  broker?: Maybe<Boolean>;
  region?: Maybe<Int>;
  area?: Maybe<Int>;
  ward?: Maybe<Int>;
  price?: Maybe<Int>;
}

export interface UserUpdateManyMutationInput {
  phone?: Maybe<String>;
  password?: Maybe<String>;
  phoneVerified?: Maybe<Boolean>;
  email?: Maybe<String>;
  emailVerified?: Maybe<Boolean>;
  name?: Maybe<String>;
  username?: Maybe<String>;
  avatar?: Maybe<String>;
  gender?: Maybe<Gender>;
  birthday?: Maybe<DateTimeInput>;
  address?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Category {
  id: ID_Output;
  title: String;
  slug: String;
  path?: String;
  created: DateTimeOutput;
  updated: DateTimeOutput;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  cateId: <T = PostPromise>() => T;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  path: () => Promise<String>;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cateId: <T = PostSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  path: () => Promise<AsyncIterator<String>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cateId: <T = PostPromise>() => T;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  path: () => Promise<String>;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
}

export interface Post {
  id: ID_Output;
  title: String;
  thumbnail: String;
  broker: Boolean;
  params: Params;
  region: Int;
  area: Int;
  ward: Int;
  price: Int;
  postDetail: PostDetail;
  created: DateTimeOutput;
  updated: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  thumbnail: () => Promise<String>;
  category: <T = CategoryPromise>() => T;
  broker: () => Promise<Boolean>;
  params: <T = ParamsPromise>() => T;
  region: () => Promise<Int>;
  area: () => Promise<Int>;
  ward: () => Promise<Int>;
  price: () => Promise<Int>;
  postDetail: <T = PostDetailPromise>() => T;
  poster: <T = UserPromise>() => T;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  category: <T = CategorySubscription>() => T;
  broker: () => Promise<AsyncIterator<Boolean>>;
  params: <T = ParamsSubscription>() => T;
  region: () => Promise<AsyncIterator<Int>>;
  area: () => Promise<AsyncIterator<Int>>;
  ward: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Int>>;
  postDetail: <T = PostDetailSubscription>() => T;
  poster: <T = UserSubscription>() => T;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  thumbnail: () => Promise<String>;
  category: <T = CategoryPromise>() => T;
  broker: () => Promise<Boolean>;
  params: <T = ParamsPromise>() => T;
  region: () => Promise<Int>;
  area: () => Promise<Int>;
  ward: () => Promise<Int>;
  price: () => Promise<Int>;
  postDetail: <T = PostDetailPromise>() => T;
  poster: <T = UserPromise>() => T;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
}

export interface Params {
  acreage?: Int;
  rooms?: Int;
}

export interface ParamsPromise extends Promise<Params>, Fragmentable {
  acreage: () => Promise<Int>;
  rooms: () => Promise<Int>;
}

export interface ParamsSubscription
  extends Promise<AsyncIterator<Params>>,
    Fragmentable {
  acreage: () => Promise<AsyncIterator<Int>>;
  rooms: () => Promise<AsyncIterator<Int>>;
}

export interface ParamsNullablePromise
  extends Promise<Params | null>,
    Fragmentable {
  acreage: () => Promise<Int>;
  rooms: () => Promise<Int>;
}

export interface PostDetail {
  images: String[];
  content: String;
  address: String;
}

export interface PostDetailPromise extends Promise<PostDetail>, Fragmentable {
  images: () => Promise<String[]>;
  content: () => Promise<String>;
  address: () => Promise<String>;
}

export interface PostDetailSubscription
  extends Promise<AsyncIterator<PostDetail>>,
    Fragmentable {
  images: () => Promise<AsyncIterator<String[]>>;
  content: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
}

export interface PostDetailNullablePromise
  extends Promise<PostDetail | null>,
    Fragmentable {
  images: () => Promise<String[]>;
  content: () => Promise<String>;
  address: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  phone: String;
  password: String;
  phoneVerified?: Boolean;
  email?: String;
  emailVerified?: Boolean;
  name?: String;
  username?: String;
  avatar?: String;
  gender?: Gender;
  birthday?: DateTimeOutput;
  address?: String;
  role?: Role;
  created: DateTimeOutput;
  updated: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  phone: () => Promise<String>;
  password: () => Promise<String>;
  phoneVerified: () => Promise<Boolean>;
  email: () => Promise<String>;
  emailVerified: () => Promise<Boolean>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  avatar: () => Promise<String>;
  gender: () => Promise<Gender>;
  birthday: () => Promise<DateTimeOutput>;
  address: () => Promise<String>;
  role: () => Promise<Role>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  phone: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phoneVerified: () => Promise<AsyncIterator<Boolean>>;
  email: () => Promise<AsyncIterator<String>>;
  emailVerified: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  address: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  phone: () => Promise<String>;
  password: () => Promise<String>;
  phoneVerified: () => Promise<Boolean>;
  email: () => Promise<String>;
  emailVerified: () => Promise<Boolean>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  avatar: () => Promise<String>;
  gender: () => Promise<Gender>;
  birthday: () => Promise<DateTimeOutput>;
  address: () => Promise<String>;
  role: () => Promise<Role>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  title: String;
  slug: String;
  path?: String;
  created: DateTimeOutput;
  updated: DateTimeOutput;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  path: () => Promise<String>;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  path: () => Promise<AsyncIterator<String>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  thumbnail: String;
  broker: Boolean;
  region: Int;
  area: Int;
  ward: Int;
  price: Int;
  created: DateTimeOutput;
  updated: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  thumbnail: () => Promise<String>;
  broker: () => Promise<Boolean>;
  region: () => Promise<Int>;
  area: () => Promise<Int>;
  ward: () => Promise<Int>;
  price: () => Promise<Int>;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  broker: () => Promise<AsyncIterator<Boolean>>;
  region: () => Promise<AsyncIterator<Int>>;
  area: () => Promise<AsyncIterator<Int>>;
  ward: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Int>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  phone: String;
  password: String;
  phoneVerified?: Boolean;
  email?: String;
  emailVerified?: Boolean;
  name?: String;
  username?: String;
  avatar?: String;
  gender?: Gender;
  birthday?: DateTimeOutput;
  address?: String;
  role?: Role;
  created: DateTimeOutput;
  updated: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  phone: () => Promise<String>;
  password: () => Promise<String>;
  phoneVerified: () => Promise<Boolean>;
  email: () => Promise<String>;
  emailVerified: () => Promise<Boolean>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  avatar: () => Promise<String>;
  gender: () => Promise<Gender>;
  birthday: () => Promise<DateTimeOutput>;
  address: () => Promise<String>;
  role: () => Promise<Role>;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  phone: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phoneVerified: () => Promise<AsyncIterator<Boolean>>;
  email: () => Promise<AsyncIterator<String>>;
  emailVerified: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  address: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "PostDetail",
    embedded: true
  },
  {
    name: "Params",
    embedded: true
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Types",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
