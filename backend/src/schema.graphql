# directive @auth(requires: Role = ADMIN) on OBJECT | FIELD_DEFINITION

type Query {
  info: String!
  feed(
    filter: String
    skip: Int
    take: Int
    orderBy: PostOrderByInput
  ): Feed!
}

type Feed {
  id: ID!
  posts: [Post!]!
  count: Int!
}

input WereId {
  id: String!
}

type Mutation {
  signin(phone: String!, password: String!): AuthPayload
  signup(
    phone: String!
    email: String
    password: String!
    name: String!
    role: Role
  ): AuthPayload
  addPost(input: PostInput): Post @auth(requires: USER)
  updatePost(where: WereId, data: PostInput): Post @auth(requires: USER)
  deletePost(where: WereId): Post @auth(requires: USER)
  addCategory(input: CategoryInput): Category @auth(requires: ADMIN)
  updateCategory(input: WereId, data: CategoryInput): Category @auth(requires: ADMIN)
  deleteCategory(where: WereId): Category @auth(requires: ADMIN)
  vote(postId: ID!): Vote
}

input PostInput {
  title: String
  images: Json
  thumbnail: String
  categoryId: String
  type: Type
  address: String
  content: String
  broker: Boolean
  params: Json
  region: Int
  area: Int
  ward: Int
  price: Int
  like: Int
}

type Category {
  id: String!
  posts: [Post!]!
  title: String!
  slug: String!
  path: String
  parent: String
  children: Json
  type: String
}

input CategoryInput {
  id: String!
  title: String!
  slug: String!
  parent: String
  children: String
  type: String
  path: String
}

type Subscription {
  newPost: Post
  newVote: Vote
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  phone: String!
  email: String!
  role: Role
  posts: [Post!]!
}

type Post {
  id: ID!
  title: String!
  thumbnail: String
  categoryId: String!
  type: Type!
  broker: Boolean
  params: Json!
  region: Int!
  area: Int!
  ward: Int!
  price: Int!
  content: String!
  address: String!
  postDetail: Json!
  postedById: String!
  postedBy: User
  votes: [Vote!]!
  created: DateTime!
  updated: DateTime!
}

type Vote {
  id: ID!
  post: Post!
  user: User!
}

input PostOrderByInput {
  title: Sort
  created: Sort
  updated: Sort
}

enum Sort {
  asc
  desc
}

enum Type {
  S
  T
  B
  R
}

scalar DateTime
scalar Json