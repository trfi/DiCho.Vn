# directive @auth(requires: Role = ADMIN) on OBJECT | FIELD_DEFINITION

type Query {
  users: UserCount!
  currentUser: User!
  info: String!
  categories(filter: String, skip: Int, take: Int, orderBy: PostOrderByInput): [Category!]!
  posts(
    where: PostInput
    filter: String
    orderBy: PostOrderByInput
    take: Int
    pagination: PaginationInput
  ): [Post]!
  post(where: WereId!): Post!
  feed(filter: String, skip: Int, take: Int, orderBy: PostOrderByInput): Feed!
  commentByUser(userId: String!): [Comment!]!
  messages(to: ID!): [Chat] @auth(requires: USER)
  inboxs: [InboxResult]
}

input PaginationInput {
  nextCursor: String
  previousCursor: String
  nextPage: Int
  action: PageAction
}

type PostCount {
  count: Int!
  posts: [Post!]!
}

type InboxResult {
  message: Message
  senderId: ID
  sender: User
  receiverId: ID
  receiver: User
  lastMsg: String
}

type UserCount {
  count: Int!
  users: [User!]!
}

type Feed {
  id: ID!
  posts: [Post!]!
  count: Int!
}

input WereId {
  id: ID!
}

type Mutation {
  login(phone: String!, password: String!): AuthPayload
  signup(
    phone: String!
    email: String
    password: String!
    name: String!
    role: Role
  ): AuthPayload
  updateUser(id: ID!, data: UserInput): User
  deleteUser(id: ID!): User

  addPost(input: PostInput!): Post @auth(requires: USER)
  updatePost(id: ID!, data: PostInput!): Post @auth(requires: USER)
  deletePost(id: ID!): Post @auth(requires: USER)

  addCategory(input: CategoryInput!): Category @auth(requires: ADMIN)
  updateCategory(input: WereId!, data: CategoryInput!): Category
    @auth(requires: ADMIN)
  deleteCategory(where: WereId!): Category @auth(requires: ADMIN)

  addComment(content: String!, postId: ID!): CommentOutput @auth(requires: USER)
  updateComment(id: ID!): Comment @auth(requires: USER)
  deleteComment(id: ID!, postId: String!): CommentOutput @auth(requires: USER)

  follow(followerId: ID!): FollowOutput @auth(requires: USER)
  unfollow(followerId: ID!): FollowOutput @auth(requires: USER)

  vote(postId: ID!): Vote @auth(requires: USER)
  like(postId: ID!): likeOutput @auth(requires: USER)
  unlike(postId: ID): likeOutput @auth(requires: USER)

  sendMessage(to: ID!, content: String!): MessageResult @auth(requires: USER)
  deleteMessage(id: ID!): MessageResult @auth(requires: USER)
}

type Subscription {
  newPost: Post
  newVote: Vote
  newComment(postId: ID!): CommentOutput
}

type likeOutput {
  success: Boolean!
  post: Post
}

union MessageResult = Message | Chat

type MessageOutput {
  message: Message
  chat: Chat
}

type FollowOutput {
  following: User
  follower: User
}

type CommentOutput {
  comment: Comment
  post: Post
}

input PostInput {
  id: ID
  title: String
  images: [String]
  thumbnail: String
  categoryId: String
  type: Type
  address: String
  content: String
  broker: Boolean
  params: Json
  region: Int
  area: Int
  ward: Int
  price: Int
  like: Int
}

type Category {
  id: String
  posts: [Post]
  title: String
  slug: String
  path: String
  parent: String
  children: Json
  types: [Type]
}

input CategoryInput {
  id: String!
  title: String!
  slug: String!
  parent: String
  children: String
  types: [Type]
  path: String
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID
  name: String
  username: String
  phone: String
  phoneVerified: Boolean
  email: String
  emailVerified: Boolean
  role: Role
  avatar: String
  gender: Gender
  address: String
  birthday: String
  likes: [Post]
  comments: [Comment]
  likeCount: Int
  commentCount: Int
  followerCount: Int
  followingCount: Int
  followers: [Post]
  following: [Post]
  posts: [Post]
}

input UserInput {
  id: ID
  name: String
  username: String
  phone: String
  phoneVerified: Boolean
  email: String
  emailVerified: Boolean
  role: Role
  avatar: String
  gender: Gender
  address: String
  birthday: String
}

type Post {
  id: ID
  title: String
  thumbnail: String
  category: Category
  categoryId: String
  type: Type
  broker: Boolean
  params: Json
  region: Int
  area: Int
  ward: Int
  price: Int
  content: String
  images: [String]
  address: String
  postDetail: Json
  postedById: String
  postedBy: User
  likeCount: Int
  like: [Like]
  comments: [Comment]
  commentCount: Int
  userLiked: Boolean
  votes: [Vote]
  created: DateTime
  updated: DateTime
}

type Vote {
  id: ID!
  post: Post!
  user: User!
}

type Like {
  post: Post
  user: User
}

type Follow {
  user: User
  userId: String
  following: User
  followingId: String
  created: DateTime
}

type Comment {
  id: ID!
  post: Post
  user: User
  content: String
  created: DateTime
}

type Message {
  id: String
  content: String
  attachment: [String]
  deletedUser: String
  chat: Chat
}

type Chat {
  message: Message
  msgId: String
  sender: User
  senderId: String
  receiver: User
  receiverId: String
  lastMsg: String
  seen: Boolean
  deletedUser: String
  unseenNumber: Int
}

input PostOrderByInput {
  id: Sort
  title: Sort
  created: Sort
  updated: Sort
}

enum Sort {
  asc
  desc
}

enum Type {
  S
  T
  B
  R
}

enum Gender {
  M
  F
  O
}

enum PageAction {
  n
  p
}

scalar DateTime
scalar Json
