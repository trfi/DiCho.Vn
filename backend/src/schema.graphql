type Query {
  info: String!
  feed(
    filter: String
    skip: Int
    take: Int
    orderBy: PostOrderByInput
  ): Feed!
}

type Feed {
  id: ID!
  posts: [Post!]!
  count: Int!
}

type Mutation {
  post(input: PostInput): Post!
  signup(
    phone: String!
    email: String
    password: String!
    name: String!
  ): AuthPayload
  login(phone: String!, password: String!): AuthPayload
  category(input: CategoryInput): Category!
  vote(postId: ID!): Vote
}

input PostInput {
  title: String!
  thumbnail: String!
  categoryId: String
  broker: Boolean
  params: Json!
  region: Int!
  area: Int!
  ward: Int!
  price: Int!
  postDetail: Json!
  postedById: String
}

input CategoryInput {
  id: String!
  title: String!
  slug: String!
  path: String
}

type Subscription {
  newPost: Post
  newVote: Vote
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  phone: String!
  email: String!
  posts: [Post!]!
}

type Post {
  id: ID!
  title: String!
  thumbnail: String!
  categoryId: String!
  broker: Boolean
  params: Json!
  region: Int!
  area: Int!
  ward: Int!
  price: Int!
  postDetail: Json!
  postedById: String!
  postedBy: User
  votes: [Vote!]!
  created: DateTime!
  updated: DateTime!
}

type Category {
  id: String!
  posts: [Post!]!
  title: String!
  slug: String!
  path: String
}

type Vote {
  id: ID!
  post: Post!
  user: User!
}

input PostOrderByInput {
  title: Sort
  created: Sort
  updated: Sort
}

enum Sort {
  asc
  desc
}

scalar DateTime
scalar Json
